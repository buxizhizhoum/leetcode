#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums =
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums =
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
"""


class Solution(object):
    directions = [[-1, 0], [0, 1], [1, 0], [0, -1]]

    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if len(matrix) == 0:
            return 0
        res = 0
        cache = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                # self.in_matrix() is ensured by 2 lines above.
                new_res = self.dfs(matrix, i, j, cache)
                res = max(res, new_res)
        return res

    def dfs(self, matrix, x, y, cache):
        # if increasing path of a point is already calculated, return directly
        if cache[x][y] != 0:
            return cache[x][y]

        res = 1
        for direction in self.directions:
            new_x = x + direction[0]
            new_y = y + direction[1]
            # new point should be in matrix, not visited and larger
            if self.in_matrix(new_x, new_y, matrix) \
                    and matrix[new_x][new_y] > matrix[x][y]:
                # the length from i, j is the longest path of the points around
                # it plus 1
                path_len = 1 + self.dfs(matrix, new_x, new_y, cache)
                res = max(res, path_len)
        cache[x][y] = res
        return res

    @staticmethod
    def in_matrix(x, y, matrix):
        length = len(matrix)
        width = len(matrix[0])

        if 0 <= x < length and 0 <= y < width:
            return True
        return False


if __name__ == "__main__":
    test_matrix = [[9, 9, 4],
                   [6, 6, 8],
                   [2, 1, 1]]
    test_matrix = [
        [6, 11, 8, 10, 5, 16, 15, 19, 15, 11, 18, 1, 14, 14, 1, 3, 12, 16, 13,
         19, 13, 14, 18, 10, 7, 4, 3, 17, 2, 19, 2, 18, 14, 14, 19, 8, 8, 10],
        [13, 6, 7, 15, 14, 12, 1, 12, 9, 7, 13, 16, 18, 7, 15, 11, 1, 16, 18,
         5, 19, 2, 10, 1, 6, 15, 11, 18, 19, 10, 10, 12, 15, 5, 7, 5, 15, 0],
        [19, 4, 18, 13, 13, 18, 2, 13, 1, 8, 9, 17, 13, 13, 14, 10, 0, 17, 4,
         19, 8, 0, 16, 8, 6, 0, 11, 1, 17, 2, 14, 1, 2, 16, 18, 17, 8, 0],
        [12, 1, 12, 1, 11, 1, 3, 10, 1, 14, 11, 13, 3, 11, 12, 3, 8, 11, 9, 14,
         2, 5, 4, 16, 18, 16, 15, 17, 10, 6, 4, 16, 12, 4, 12, 17, 9, 19],
        [8, 19, 19, 8, 8, 9, 17, 19, 9, 18, 2, 14, 3, 13, 5, 15, 8, 1, 4, 12,
         1, 1, 18, 18, 18, 8, 15, 0, 8, 0, 16, 9, 4, 4, 17, 6, 3, 6],
        [16, 11, 2, 11, 19, 18, 7, 2, 10, 5, 17, 15, 14, 17, 2, 12, 18, 19, 3,
         15, 17, 11, 9, 19, 4, 1, 19, 9, 10, 12, 11, 4, 14, 6, 3, 0, 1, 18],
        [14, 16, 14, 8, 0, 8, 7, 19, 6, 2, 14, 14, 2, 12, 16, 9, 19, 14, 17,
         16, 14, 2, 2, 4, 17, 14, 1, 13, 1, 7, 4, 14, 16, 12, 5, 4, 3, 14],
        [8, 11, 15, 5, 17, 18, 11, 9, 18, 16, 6, 4, 3, 9, 7, 3, 2, 8, 17, 9, 2,
         8, 18, 11, 3, 2, 16, 14, 6, 5, 8, 15, 11, 4, 19, 12, 13, 1],
        [10, 13, 3, 18, 17, 10, 10, 14, 0, 8, 6, 11, 6, 12, 13, 3, 16, 15, 2,
         14, 7, 12, 3, 10, 14, 5, 0, 14, 14, 5, 1, 5, 11, 19, 18, 19, 12, 15],
        [13, 17, 8, 14, 0, 18, 5, 3, 10, 10, 10, 5, 13, 7, 16, 5, 19, 16, 17,
         6, 2, 2, 18, 12, 12, 11, 3, 17, 19, 13, 5, 11, 6, 15, 19, 11, 2, 3],
        [6, 4, 17, 0, 16, 4, 9, 4, 0, 19, 1, 15, 9, 5, 1, 11, 1, 10, 15, 19, 8,
         6, 7, 6, 14, 16, 7, 16, 9, 0, 16, 8, 12, 12, 14, 6, 2, 0],
        [6, 14, 7, 2, 15, 3, 14, 17, 10, 9, 3, 7, 15, 8, 16, 10, 1, 13, 3, 19,
         10, 4, 15, 17, 9, 4, 0, 14, 9, 12, 8, 1, 15, 19, 1, 19, 3, 7],
        [13, 0, 0, 12, 5, 14, 18, 19, 10, 5, 6, 10, 14, 3, 5, 10, 19, 2, 13, 8,
         2, 11, 5, 2, 11, 19, 16, 1, 13, 10, 2, 13, 4, 13, 19, 1, 15, 3],
        [13, 17, 10, 7, 5, 2, 1, 6, 9, 19, 11, 12, 1, 19, 17, 2, 16, 12, 17,
         14, 18, 0, 4, 6, 0, 7, 17, 0, 0, 7, 5, 19, 0, 19, 16, 16, 14, 12],
        [16, 8, 2, 15, 18, 13, 0, 1, 2, 12, 8, 1, 12, 13, 4, 2, 13, 12, 1, 13,
         11, 16, 18, 2, 14, 6, 7, 8, 16, 8, 18, 16, 16, 18, 4, 18, 12, 14],
        [14, 14, 0, 4, 2, 2, 7, 14, 2, 1, 13, 3, 9, 9, 14, 15, 10, 2, 15, 3,
         14, 11, 15, 19, 0, 18, 5, 3, 3, 11, 5, 4, 12, 3, 5, 16, 7, 11],
        [14, 4, 17, 8, 4, 7, 12, 13, 7, 8, 11, 8, 4, 3, 8, 11, 4, 1, 1, 11, 7,
         8, 19, 0, 5, 1, 14, 15, 19, 4, 1, 15, 5, 12, 1, 19, 13, 10],
        [6, 7, 12, 19, 14, 19, 0, 9, 3, 9, 14, 14, 16, 18, 5, 17, 12, 15, 1,
         15, 14, 2, 18, 9, 9, 8, 9, 4, 8, 7, 1, 9, 14, 9, 2, 8, 14, 0],
        [0, 6, 9, 17, 19, 18, 13, 15, 0, 5, 13, 9, 15, 12, 6, 8, 19, 11, 7, 16,
         16, 17, 12, 11, 16, 15, 2, 3, 18, 3, 7, 17, 7, 1, 4, 6, 7, 17],
        [5, 11, 0, 4, 16, 9, 9, 10, 10, 18, 6, 17, 15, 12, 0, 19, 5, 3, 2, 1,
         0, 15, 11, 0, 2, 12, 18, 15, 14, 5, 0, 7, 7, 13, 4, 7, 7, 17],
        [10, 15, 5, 15, 19, 7, 17, 8, 8, 6, 10, 16, 18, 10, 18, 3, 1, 15, 2, 8,
         17, 7, 0, 11, 7, 16, 0, 5, 5, 10, 15, 7, 10, 1, 15, 0, 13, 2],
        [0, 15, 16, 10, 15, 17, 16, 0, 14, 8, 16, 12, 11, 2, 16, 18, 19, 5, 13,
         4, 7, 3, 2, 0, 13, 8, 14, 6, 5, 11, 17, 2, 18, 14, 12, 3, 13, 6],
        [10, 3, 5, 14, 5, 15, 14, 4, 18, 7, 17, 10, 1, 4, 8, 8, 17, 10, 3, 12,
         16, 16, 10, 10, 6, 6, 17, 17, 1, 14, 7, 3, 6, 12, 19, 5, 18, 13],
        [7, 0, 0, 3, 3, 13, 7, 18, 4, 7, 7, 11, 6, 18, 6, 6, 11, 12, 5, 3, 3,
         8, 17, 13, 6, 5, 4, 10, 0, 4, 1, 0, 9, 14, 1, 10, 0, 9],
        [11, 11, 10, 4, 7, 15, 14, 19, 10, 7, 19, 14, 2, 8, 10, 11, 6, 17, 12,
         18, 6, 10, 8, 16, 9, 5, 8, 12, 14, 19, 10, 15, 9, 4, 19, 12, 11, 4],
        [11, 4, 2, 13, 14, 10, 13, 14, 11, 17, 7, 3, 8, 13, 18, 16, 3, 13, 10,
         4, 0, 4, 15, 6, 4, 3, 5, 19, 2, 2, 0, 19, 8, 6, 1, 7, 13, 14],
        [9, 16, 6, 12, 12, 13, 8, 15, 16, 15, 9, 3, 12, 5, 14, 13, 0, 8, 17, 8,
         0, 1, 11, 2, 13, 15, 11, 4, 4, 1, 3, 2, 10, 19, 3, 6, 13, 13],
        [4, 6, 2, 0, 10, 6, 11, 17, 2, 0, 16, 1, 3, 16, 17, 19, 19, 4, 3, 6, 7,
         1, 17, 18, 13, 8, 18, 14, 18, 19, 18, 1, 8, 1, 14, 14, 9, 9],
        [8, 6, 11, 0, 15, 8, 0, 17, 19, 15, 10, 13, 14, 4, 15, 8, 1, 4, 10, 2,
         15, 6, 19, 17, 11, 2, 5, 16, 8, 17, 16, 5, 5, 17, 1, 1, 7, 2],
        [2, 0, 0, 3, 6, 0, 2, 10, 9, 14, 5, 18, 18, 3, 2, 11, 2, 6, 9, 1, 15,
         12, 13, 14, 17, 6, 0, 19, 0, 3, 6, 14, 7, 13, 0, 17, 17, 5],
        [6, 15, 7, 19, 8, 12, 14, 8, 6, 8, 3, 7, 15, 13, 5, 4, 1, 13, 13, 16,
         4, 10, 13, 14, 13, 17, 8, 3, 5, 7, 7, 8, 3, 8, 10, 14, 2, 2],
        [9, 3, 4, 13, 13, 8, 13, 13, 11, 4, 16, 13, 4, 10, 17, 4, 16, 3, 3, 2,
         9, 7, 12, 0, 11, 6, 4, 5, 6, 1, 3, 8, 16, 18, 16, 19, 6, 5],
        [15, 7, 5, 4, 9, 15, 18, 10, 19, 3, 12, 9, 5, 2, 18, 1, 2, 11, 1, 10,
         14, 17, 7, 10, 19, 2, 6, 1, 9, 18, 16, 13, 1, 1, 12, 5, 17, 10],
        [15, 10, 2, 17, 1, 13, 15, 0, 15, 17, 6, 2, 6, 1, 5, 8, 1, 14, 3, 8, 7,
         18, 0, 17, 16, 10, 19, 1, 0, 18, 0, 15, 7, 14, 19, 16, 8, 10],
        [16, 9, 3, 11, 12, 11, 13, 1, 16, 0, 16, 16, 1, 6, 4, 15, 9, 8, 10, 18,
         2, 18, 16, 15, 5, 18, 10, 8, 1, 10, 4, 19, 17, 12, 16, 6, 0, 8],
        [14, 16, 16, 10, 12, 6, 3, 8, 8, 11, 19, 12, 15, 9, 9, 11, 0, 1, 13, 6,
         4, 10, 0, 13, 1, 15, 10, 2, 5, 15, 18, 8, 14, 9, 1, 4, 8, 14],
        [4, 10, 16, 3, 19, 13, 1, 17, 7, 6, 0, 3, 3, 11, 12, 9, 8, 15, 0, 19,
         10, 18, 1, 6, 7, 15, 9, 9, 6, 18, 2, 5, 4, 12, 7, 1, 1, 2],
        [4, 12, 10, 14, 18, 17, 0, 6, 8, 1, 13, 3, 8, 1, 6, 5, 5, 15, 9, 5, 13,
         11, 16, 19, 4, 3, 19, 11, 14, 15, 16, 8, 2, 16, 10, 15, 3, 3],
        [4, 6, 6, 10, 19, 5, 2, 0, 14, 11, 10, 14, 14, 13, 13, 15, 3, 4, 8, 16,
         2, 13, 11, 4, 13, 14, 18, 18, 13, 1, 17, 10, 15, 4, 16, 4, 15, 8],
        [1, 9, 1, 11, 18, 6, 13, 1, 18, 5, 10, 0, 4, 7, 15, 7, 1, 13, 16, 13,
         8, 13, 4, 8, 3, 17, 4, 8, 8, 18, 19, 2, 5, 14, 12, 1, 10, 8],
        [2, 8, 18, 10, 10, 16, 1, 5, 0, 5, 1, 1, 8, 0, 11, 16, 16, 15, 14, 0,
         16, 9, 19, 17, 13, 6, 11, 9, 18, 15, 6, 8, 13, 2, 13, 16, 11, 15],
        [11, 10, 8, 0, 14, 0, 18, 12, 17, 14, 12, 16, 9, 7, 6, 4, 9, 1, 16, 16,
         7, 17, 13, 2, 18, 2, 14, 15, 1, 2, 0, 10, 2, 14, 19, 14, 1, 10],
        [5, 9, 16, 16, 4, 18, 4, 7, 7, 8, 6, 5, 4, 16, 3, 15, 6, 4, 18, 17, 6,
         3, 4, 1, 10, 5, 14, 8, 13, 12, 16, 12, 11, 10, 5, 18, 12, 17],
        [0, 11, 11, 10, 10, 15, 9, 9, 1, 10, 12, 9, 1, 18, 0, 14, 10, 7, 9, 19,
         15, 6, 11, 3, 6, 17, 13, 7, 8, 3, 0, 13, 13, 16, 13, 9, 0, 1],
        [0, 17, 13, 6, 1, 8, 1, 9, 7, 8, 2, 19, 12, 0, 9, 2, 7, 13, 16, 17, 18,
         13, 17, 9, 16, 7, 5, 4, 2, 5, 6, 16, 15, 3, 18, 15, 18, 14],
        [16, 10, 1, 5, 8, 9, 16, 5, 19, 16, 19, 12, 5, 12, 8, 4, 12, 14, 17,
         13, 14, 1, 10, 0, 3, 4, 16, 15, 0, 6, 11, 2, 0, 17, 18, 13, 5, 10],
        [4, 14, 11, 14, 5, 6, 18, 15, 0, 15, 13, 11, 6, 8, 8, 15, 5, 4, 18, 16,
         18, 5, 12, 10, 15, 1, 19, 13, 4, 5, 5, 0, 2, 6, 15, 19, 3, 1],
        [6, 9, 6, 14, 12, 8, 7, 16, 18, 8, 2, 1, 1, 14, 17, 5, 5, 3, 19, 6, 18,
         7, 8, 3, 2, 6, 7, 1, 17, 14, 13, 19, 13, 19, 9, 18, 9, 0],
        [4, 5, 12, 14, 9, 0, 18, 8, 5, 3, 4, 5, 18, 10, 5, 11, 19, 16, 2, 13,
         10, 16, 3, 12, 17, 6, 0, 7, 6, 11, 3, 16, 17, 11, 15, 8, 0, 4],
        [6, 3, 10, 8, 8, 17, 13, 13, 16, 1, 8, 4, 5, 15, 9, 15, 10, 4, 4, 9, 6,
         19, 12, 16, 8, 1, 2, 7, 10, 2, 9, 18, 17, 14, 9, 14, 17, 6],
        [16, 6, 19, 4, 11, 3, 17, 15, 5, 17, 18, 0, 7, 19, 8, 6, 16, 2, 14, 0,
         16, 11, 14, 1, 16, 1, 11, 19, 9, 10, 0, 16, 7, 17, 2, 10, 8, 14],
        [1, 17, 18, 3, 11, 14, 9, 18, 1, 17, 2, 12, 14, 4, 13, 4, 14, 0, 15,
         18, 4, 12, 9, 0, 12, 4, 1, 11, 1, 13, 19, 15, 14, 13, 11, 0, 5, 15],
        [1, 9, 13, 10, 1, 3, 1, 4, 3, 15, 6, 15, 8, 5, 8, 18, 11, 16, 6, 9, 15,
         0, 0, 13, 16, 7, 10, 16, 16, 5, 4, 19, 10, 15, 9, 11, 15, 10],
        [17, 7, 13, 2, 19, 18, 7, 13, 19, 13, 15, 11, 13, 15, 12, 11, 10, 8, 0,
         11, 17, 17, 19, 5, 11, 6, 5, 6, 16, 12, 5, 14, 11, 14, 7, 10, 12, 10],
        [2, 19, 16, 8, 3, 11, 13, 14, 5, 12, 13, 4, 18, 17, 14, 17, 6, 13, 4,
         11, 11, 9, 18, 11, 10, 10, 15, 12, 13, 8, 13, 14, 11, 10, 5, 0, 16,
         17],
        [7, 15, 2, 0, 19, 7, 13, 15, 1, 6, 10, 13, 9, 4, 5, 16, 16, 18, 4, 7,
         17, 7, 0, 6, 15, 14, 14, 6, 8, 18, 15, 6, 6, 1, 2, 7, 5, 14],
        [19, 11, 7, 14, 6, 8, 8, 7, 9, 7, 18, 4, 11, 17, 8, 1, 10, 14, 10, 3,
         9, 9, 19, 0, 19, 4, 7, 16, 18, 8, 16, 0, 8, 11, 15, 17, 19, 18],
        [7, 12, 13, 6, 3, 18, 5, 2, 18, 15, 5, 14, 5, 0, 17, 8, 16, 10, 0, 0,
         13, 1, 18, 12, 2, 8, 6, 5, 17, 5, 5, 8, 15, 17, 12, 9, 11, 10],
        [12, 1, 10, 1, 8, 16, 0, 13, 17, 5, 16, 18, 6, 3, 0, 19, 1, 2, 16, 9,
         18, 7, 10, 8, 4, 13, 8, 16, 18, 12, 15, 14, 13, 16, 11, 3, 11, 11],
        [3, 6, 3, 16, 15, 14, 5, 15, 17, 14, 8, 15, 6, 12, 13, 12, 10, 5, 7,
         14, 14, 19, 12, 15, 6, 18, 15, 19, 2, 8, 14, 18, 7, 8, 12, 17, 9, 19],
        [5, 14, 3, 6, 3, 6, 12, 13, 2, 11, 11, 12, 18, 19, 17, 11, 4, 18, 16,
         0, 11, 8, 16, 6, 14, 15, 12, 18, 4, 10, 6, 17, 19, 6, 3, 16, 13, 0],
        [5, 0, 5, 10, 7, 14, 3, 15, 5, 7, 16, 13, 2, 18, 13, 0, 11, 7, 5, 9,
         13, 12, 10, 6, 14, 7, 5, 5, 16, 19, 11, 0, 3, 12, 14, 8, 2, 6],
        [4, 19, 14, 14, 2, 16, 11, 19, 8, 13, 4, 8, 13, 3, 14, 19, 15, 11, 16,
         15, 9, 14, 2, 11, 5, 7, 8, 14, 13, 4, 7, 12, 1, 18, 4, 7, 0, 3],
        [0, 0, 9, 3, 15, 4, 5, 19, 4, 14, 6, 5, 2, 7, 14, 12, 6, 13, 6, 5, 6,
         18, 11, 0, 2, 13, 0, 9, 6, 11, 1, 10, 4, 3, 12, 9, 4, 9],
        [1, 16, 18, 13, 12, 17, 14, 12, 4, 1, 15, 12, 3, 5, 11, 8, 2, 7, 16, 3,
         7, 11, 2, 2, 10, 13, 19, 6, 0, 8, 3, 1, 13, 10, 4, 8, 17, 2],
        [18, 13, 0, 4, 10, 12, 12, 11, 9, 19, 16, 5, 4, 0, 18, 17, 2, 19, 13,
         1, 2, 0, 10, 11, 15, 17, 9, 13, 11, 4, 1, 6, 16, 0, 4, 16, 10, 17],
        [16, 8, 10, 1, 12, 14, 19, 4, 19, 18, 3, 16, 4, 4, 17, 18, 5, 3, 6, 4,
         6, 1, 10, 8, 11, 2, 9, 11, 18, 3, 16, 16, 4, 8, 11, 8, 18, 18],
        [12, 1, 0, 7, 13, 7, 9, 19, 2, 19, 19, 15, 15, 8, 6, 9, 6, 16, 8, 12,
         10, 15, 9, 0, 7, 8, 8, 18, 8, 1, 2, 13, 7, 1, 17, 15, 12, 5],
        [6, 10, 11, 3, 10, 0, 9, 19, 15, 15, 10, 1, 7, 8, 17, 16, 13, 11, 7, 5,
         15, 14, 9, 3, 16, 18, 1, 11, 12, 15, 8, 6, 2, 14, 4, 10, 10, 5],
        [5, 18, 4, 14, 10, 6, 9, 9, 15, 14, 6, 8, 5, 19, 14, 2, 1, 16, 9, 7, 5,
         0, 15, 14, 9, 1, 5, 9, 12, 13, 4, 3, 8, 5, 1, 6, 7, 3],
        [14, 16, 7, 8, 16, 3, 8, 7, 8, 15, 2, 14, 4, 12, 0, 11, 10, 17, 19, 11,
         0, 9, 19, 3, 8, 18, 12, 8, 10, 19, 9, 4, 10, 0, 19, 7, 15, 8],
        [4, 4, 3, 8, 11, 14, 8, 15, 1, 16, 2, 0, 18, 9, 1, 0, 14, 0, 2, 9, 18,
         18, 0, 5, 2, 10, 0, 18, 2, 15, 8, 7, 10, 15, 4, 2, 19, 12],
        [15, 13, 12, 15, 3, 6, 17, 4, 2, 16, 16, 16, 5, 12, 14, 12, 9, 13, 16,
         16, 12, 9, 19, 12, 6, 16, 10, 6, 18, 16, 16, 3, 5, 6, 18, 16, 1, 7],
        [2, 7, 18, 15, 6, 16, 10, 16, 4, 18, 11, 5, 11, 10, 4, 10, 12, 14, 1,
         19, 18, 7, 7, 7, 4, 9, 4, 10, 6, 0, 3, 0, 3, 12, 1, 19, 10, 7],
        [4, 9, 7, 16, 17, 2, 14, 16, 14, 12, 11, 8, 17, 0, 16, 17, 0, 14, 4, 4,
         13, 9, 17, 10, 18, 1, 6, 1, 3, 14, 3, 18, 17, 18, 9, 5, 3, 0],
        [1, 15, 2, 0, 13, 7, 6, 11, 4, 17, 9, 15, 0, 9, 9, 15, 6, 11, 18, 9,
         13, 12, 8, 2, 19, 19, 6, 12, 1, 7, 5, 7, 9, 14, 2, 1, 11, 3],
        [4, 8, 1, 1, 17, 6, 12, 11, 15, 9, 5, 13, 18, 1, 1, 13, 1, 9, 2, 4, 18,
         2, 6, 16, 12, 16, 9, 5, 8, 0, 3, 0, 12, 19, 3, 16, 0, 16],
        [4, 16, 3, 5, 11, 10, 3, 4, 2, 18, 0, 9, 12, 0, 19, 1, 10, 17, 10, 1,
         6, 9, 1, 13, 2, 5, 4, 8, 19, 15, 0, 12, 8, 2, 13, 12, 3, 6],
        [16, 15, 8, 1, 15, 5, 18, 16, 14, 0, 15, 9, 5, 7, 19, 13, 0, 11, 0, 11,
         6, 19, 4, 15, 19, 19, 0, 18, 1, 19, 2, 19, 10, 17, 19, 15, 17, 8],
        [12, 2, 18, 16, 18, 6, 4, 11, 4, 13, 14, 10, 17, 6, 13, 1, 15, 17, 18,
         13, 4, 16, 3, 12, 11, 7, 17, 7, 11, 4, 18, 4, 8, 4, 0, 0, 15, 14],
        [11, 7, 10, 18, 18, 15, 16, 6, 1, 16, 3, 8, 0, 5, 3, 16, 4, 0, 6, 9, 9,
         4, 11, 8, 6, 16, 17, 18, 4, 17, 6, 6, 18, 8, 16, 10, 18, 10],
        [7, 11, 19, 5, 8, 9, 2, 8, 7, 17, 6, 4, 16, 6, 13, 17, 9, 6, 9, 16, 16,
         14, 10, 2, 15, 18, 17, 19, 2, 11, 8, 2, 0, 12, 13, 8, 3, 11],
        [12, 1, 10, 12, 15, 6, 5, 12, 1, 17, 0, 4, 8, 8, 15, 2, 17, 16, 18, 5,
         16, 6, 5, 5, 8, 15, 17, 2, 17, 10, 3, 18, 10, 4, 5, 13, 2, 4],
        [19, 9, 11, 13, 15, 12, 2, 16, 18, 9, 9, 18, 7, 4, 0, 11, 5, 2, 8, 19,
         4, 17, 1, 1, 9, 14, 15, 2, 17, 4, 0, 4, 8, 8, 1, 5, 19, 2],
        [10, 15, 0, 12, 8, 5, 5, 0, 8, 16, 5, 12, 10, 19, 18, 1, 15, 7, 8, 7,
         7, 15, 8, 16, 7, 16, 16, 18, 8, 7, 12, 16, 14, 3, 5, 17, 8, 13],
        [14, 14, 12, 3, 5, 10, 6, 6, 12, 1, 18, 6, 16, 6, 4, 14, 3, 11, 8, 10,
         6, 2, 3, 14, 19, 0, 18, 11, 5, 2, 1, 13, 16, 13, 16, 11, 17, 5],
        [9, 9, 8, 18, 11, 8, 14, 10, 8, 16, 6, 19, 16, 0, 2, 0, 11, 16, 6, 3,
         4, 11, 17, 11, 13, 9, 17, 16, 4, 15, 14, 7, 7, 7, 11, 4, 0, 7],
        [5, 8, 15, 13, 4, 5, 2, 5, 5, 0, 12, 10, 13, 13, 17, 15, 13, 14, 10,
         14, 19, 14, 8, 1, 16, 6, 0, 1, 9, 11, 2, 1, 10, 15, 15, 19, 11, 8],
        [6, 8, 2, 11, 17, 3, 14, 18, 18, 11, 12, 9, 1, 8, 19, 4, 9, 16, 14, 2,
         11, 18, 9, 15, 10, 12, 0, 2, 18, 5, 18, 6, 16, 19, 5, 0, 15, 11],
        [4, 10, 6, 0, 2, 11, 13, 14, 17, 14, 1, 3, 16, 13, 1, 0, 9, 3, 3, 6, 4,
         16, 16, 5, 8, 13, 16, 5, 7, 11, 6, 11, 19, 4, 13, 0, 8, 17]]

    print(Solution().longestIncreasingPath(test_matrix))

    # todo: Attention: time limit exceeded.
    # this is because for every point the longest increasing path is calculated
    # from beginning, however the longest path of visited point could be
    # cached and reused.














